# aiogram import
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold, hcode
# import public modules
import random
import re

# import local modules
from tg_bot.states import PostActions, AdminActions, PostHunterStates
from tg_bot.keyboards import get_requests_kb, get_main_kb, get_request_actions_kb, get_posthunter_kb


# import database module
from tg_bot.models import sessionmaker, engine, PostHunterRequest


Session = sessionmaker(bind=engine)



async def handle_posthunter(message: types.Message):
    await message.answer(
        "üïµÔ∏è‚Äç‚ôÇÔ∏è –†–µ–∂–∏–º PostHunter - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º –ø–æ—Å—Ç–æ–≤",
        reply_markup=get_posthunter_kb()
    )

async def start_posthunter(message: types.Message):
    await PostHunterStates.waiting_group_link.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –í–ö:", reply_markup=types.ReplyKeyboardRemove())

# making request process

async def process_group_link(message: types.Message, state: FSMContext):
    if 'vk.com' not in message.text:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    async with state.proxy() as data:
        data['group_url'] = message.text
    
    await PostHunterStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤:")


async def process_likes(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    async with state.proxy() as data:
        data['likes'] = int(message.text)
    
    await PostHunterStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")

async def process_comments(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    async with state.proxy() as data:
        data['comments'] = int(message.text)
    
    await PostHunterStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤:")



async def process_reposts(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    async with state.proxy() as data:
        data['reposts'] = int(message.text)
    
    await PostHunterStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:")





async def process_interval(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        session = Session()
        new_request = PostHunterRequest(
            group_url=data['group_url'],
            likes=data['likes'],
            comments=data['comments'],
            reposts=data['reposts'],
            interval=int(message.text),
            owner_id=message.from_user.id
        )
        session.add(new_request)
        session.commit()
    
    await state.finish()
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_main_kb())


# requests info and delete

async def show_requests(message: types.Message):
    session = Session()
    requests = session.query(PostHunterRequest).filter_by(
        owner_id=message.from_user.id,
        is_active=True
    ).all()
    
    if not requests:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    await message.answer("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=get_requests_kb(requests))

async def show_request_details(callback: types.CallbackQuery):
    request_id = int(callback.data.split('_')[1])
    session = Session()
    request = session.query(PostHunterRequest).get(request_id)
    
    if not request or request.owner_id != callback.from_user.id:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    text = (
        f"{hbold('–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏')} #{request.id}\n\n"
        f"üîó –ì—Ä—É–ø–ø–∞: {hcode(request.group_url)}\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–∏: {request.likes}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {request.comments}\n"
        f"‚Ü©Ô∏è –†–µ–ø–æ—Å—Ç—ã: {request.reposts}\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {request.interval} c–µ–∫—É–Ω–¥\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if request.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_request_actions_kb(request.id)
    )
    await callback.answer()



async def delete_request(callback: types.CallbackQuery):
    request_id = int(callback.data.split('_')[1])
    session = Session()
    request = session.query(PostHunterRequest).get(request_id)
    
    if request and request.owner_id == callback.from_user.id:
        request.is_active = False
        session.commit()
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")



def register_posthunter_handlers(dp: Dispatcher):
    dp.register_message_handler(process_interval, state=PostHunterStates.waiting_interval)
    dp.register_message_handler(show_requests, text='–ú–æ–∏ –∑–∞—è–≤–∫–∏')
    dp.register_callback_query_handler(delete_request, lambda c: c.data.startswith('delete_'))
    dp.register_message_handler(process_likes, state=PostHunterStates.waiting_likes_count)
    dp.register_message_handler(process_comments, state=PostHunterStates.waiting_comments_count)
    dp.register_message_handler(process_reposts, state=PostHunterStates.waiting_reposts_count)
    dp.register_message_handler(process_group_link, state=PostHunterStates.waiting_group_link)
    dp.register_message_handler(handle_posthunter, text='–ü–æ—Å—Ç—Ö–∞–Ω—Ç–µ—Ä')
    dp.register_message_handler(start_posthunter, text='–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    dp.register_callback_query_handler(show_request_details, lambda c: c.data.startswith('req_'))
